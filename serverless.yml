# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: lod-backend

# app and org for use with dashboard.serverless.com
app: lod
org: toddcarney44

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: python3.8
  stage: ${opt:stage,'dev'}
  region: us-west-2
  role: arn:aws:iam::784692787615:role/lod_general
  timeout: 120

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
  environment:
    # Aurora
    DBName: ${self:custom.DBName}

    # Lambda Functions
    API_KEY: ${self:custom.API_KEY}

    # Step Functions
    ODDS_ARN: ${self:custom.STEP.ODDS_ARN}
    RESULTS_ARN: ${self:custom.STEP.RESULTS_ARN}

custom:
  # Database variables
  DBName: lod
  MaxDBCapacity: 16
  MinDBCapacity: 2
  SecondsUntilAutoPause: 300

  # Outside Data
  API_KEY: ${ssm:/JsonOdds~true}

  STEP:
    ODDS_ARN: arn:aws:states:${self:provider.region}:784692787615:stateMachine:ParseOddsStateMachine-${self:provider.stage}
    RESULTS_ARN: arn:aws:states:${self:provider.region}:784692787615:stateMachine:ParseResultsStateMachine-${self:provider.stage}
# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

functions:
  updateOdds:
    handler: Lambdas/handler.updateOdds
    custom:
      env-resources:
        - OddsTable
  updateResults:
    handler: Lambdas/handler.updateResults
    custom:
      env-resources:
        - OddsTable
  ScheduleOdds:
    handler: Lambdas/handler.ScheduleOdds
  ScheduleResults:
    handler: Lambdas/handler.ScheduleResults
  GetOdds:
    handler: Lambdas/handler.GetOdds
    custom:
      env-resources:
        - OddsTable
    events:
      - http:
          path: GetOdds
          method: GET
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2
stepFunctions:
  stateMachines:
    oddsStepFunc:
      id: ParseOddsStateMachine
      name: ParseOddsStateMachine-${self:provider.stage}
      definition:
        Comment: "Calls the JsonOdds API to update the match details and odds databases"
        StartAt: Wait
        States:
          Wait:
            Type: Wait
            TimestampPath: "$.waitUntil"
            Next: ParseOdds
          ParseOdds:
            Type: Task
            Resource:
              Fn::GetAtt: [updateOdds, Arn]
            Next: ScheduleNext
          ScheduleNext:
            Type: Task
            Resource:
              Fn::GetAtt: [ScheduleOdds, Arn]
            End: true
    resultsStepFunc:
      id: ParseResultsStateMachine
      name: ParseResultsStateMachine-${self:provider.stage}
      definition:
        Comment: "Calls the JsonOdds API to update the results database and update users bets and statistics"
        StartAt: Wait
        States:
          Wait:
            Type: Wait
            TimestampPath: "$.waitUntil"
            Next: ParseResults
          ParseResults:
            Type: Task
            Resource:
              Fn::GetAtt: [updateResults, Arn]
            Next: ScheduleNext
          ScheduleNext:
            Type: Task
            Resource:
              Fn::GetAtt: [ScheduleResults, Arn]
            End: true 
  validate: true # enable pre-deployment definition validation (disabled by default)

plugins:
  - serverless-step-functions
  - serverless-python-requirements
  - serverless-resources-env

resources:
  Resources:
    OddsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Odds
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: id
            KeyType: HASH
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
